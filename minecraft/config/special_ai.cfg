# Configuration file

##########################################################################################################
# _general
#--------------------------------------------------------------------------------------------------------#
# General and/or miscellaneous options.
##########################################################################################################

_general {
    # If true, the mod will start up in debug mode.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:_debug_mode=false

    # Chance for an entity on the depacify list to spawn aggressive, instead of just neutral.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.005 ]
    D:depacify_aggressive_chance=0.005

    # List of passive mobs (by entity id) that are made "neutral".
    # You may put a tilde (~) in front of any entity id to make it specific. Specific entity ids will not count any entities extending (i.e., based on) the specified entity.
    # Additional number after the entity id is the chance (0.0 to 1.0) for entities of that type to spawn with the AI.
    # May or may not work on mod mobs.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Chicken 1.0, Cow 1.0, Pig 1.0, Sheep 1.0 } ]
    S:depacify_list <
        Chicken 1.0
        Cow 1.0
        Pig 1.0
        Sheep 1.0
     >

    # If true, passive mobs will seek out and eat the items used to breed them laying on the floor.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:eat_breeding_items=true

    # If true, when mobs eat breeding items off the floor, they will regain health like wolves.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:eating_heals=true
}


##########################################################################################################
# idle_activities
#--------------------------------------------------------------------------------------------------------#
# Options to customize all idle behaviors for monsters.
##########################################################################################################

idle_activities {
    # The range at which mobs will search for blocks to target horizontally (xz-plane.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:range=12

    # The range at which mobs will search for blocks to target vertically (y-axis).
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=6 ]
    I:range_vertical=6

    # Mobs' reach (from eye height) when targeting blocks. Player reach is about 4.5.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.5 ]
    D:reach=3.5

    # The number of blocks mobs randomly search to grief/fiddle with each 3 ticks.
    #    >> Integer:[ Range={ 1, 2147483647 }, Default=24 ]
    I:scan_count=24

    # The maximum number of blocks that can be searched in any given tick by all mobs. 0 is no limit.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:scan_count_global=0
}


##########################################################################################################
# idle_fiddling
#--------------------------------------------------------------------------------------------------------#
# Options to customize monsters' idle fiddling behavior.
##########################################################################################################

idle_fiddling {
    # If true, mobs will flip switches, press buttons, etc. while not doing anything else.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:_enabled=true

    # List of mobs that can gain idle fiddling AI (note that the entity must have task-based AI enabled).
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Skeleton 1.0, PigZombie 1.0 } ]
    S:mob_list <
        Skeleton 1.0
        PigZombie 1.0
     >

    # Specific blocks that will NOT be fiddled with by mobs.
    # Only really useful if you whitelist an entire namespace (*) to prevent mobs from fiddling with a few blocks from that namespace.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={  } ]
    S:target_blacklist <
     >

    # Specific blocks that will be fiddled with by mobs.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={ minecraft:tnt, minecraft:lever, minecraft:wooden_button, minecraft:stone_button, minecraft:unpowered_comparator, minecraft:powered_comparator, minecraft:unpowered_repeater, minecraft:powered_repeater, minecraft:cake, minecraft:trapdoor, minecraft:wooden_door, minecraft:birch_door, minecraft:spruce_door, minecraft:jungle_door, minecraft:acacia_door, minecraft:dark_oak_door, minecraft:fence_gate, minecraft:birch_fence_gate, minecraft:spruce_fence_gate, minecraft:jungle_fence_gate, minecraft:acacia_fence_gate, minecraft:dark_oak_fence_gate } ]
    S:target_blocks <
        minecraft:tnt
        minecraft:lever
        minecraft:wooden_button
        minecraft:stone_button
        minecraft:unpowered_comparator
        minecraft:powered_comparator
        minecraft:unpowered_repeater
        minecraft:powered_repeater
        minecraft:cake
        minecraft:trapdoor
        minecraft:wooden_door
        minecraft:birch_door
        minecraft:spruce_door
        minecraft:jungle_door
        minecraft:acacia_door
        minecraft:dark_oak_door
        minecraft:fence_gate
        minecraft:birch_fence_gate
        minecraft:spruce_fence_gate
        minecraft:jungle_fence_gate
        minecraft:acacia_fence_gate
        minecraft:dark_oak_fence_gate
     >
}


##########################################################################################################
# idle_griefing
#--------------------------------------------------------------------------------------------------------#
# Options to customize monsters' idle block breaking.
##########################################################################################################

idle_griefing {
    # If true, mobs will destroy blocks while not doing anything else.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:_enabled=true

    # If true, block breaking AI will automatically target all light sources (light value > 1).
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:break_lights=true

    # If true, a lound snapping sound (the vanilla door break sound) will be played when a block is broken, which is audible regardless of distance.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:break_sound=false

    # The block breaking speed multiplier for mobs, relative to the player's block breaking speed.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.5 ]
    D:break_speed=0.5

    # If true, griefed blocks will leave item drops.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:leave_drops=true

    # If true, creepers will be very mad about not having arms to break things with, and resort to what they know best...
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:mad_creepers=true

    # List of mobs that can gain passive griefing AI (note that the entity must have task-based AI enabled).
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Zombie 1.0, Creeper 1.0, PigZombie 0.0 } ]
    S:mob_list <
        Zombie 1.0
        Creeper 1.0
        PigZombie 0.0
     >

    # If true, mobs will only target blocks they have the tools to harvest.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:requires_tools=false

    # Specific blocks that will NOT be griefed by mobs.
    # Only really useful if "break_lights" is enabled or when you whitelist an entire namespace (*) to create safe light sources, prevent mobs from breaking normal world gen that produces light, or for removing a few blocks from a namespace that you don't want mobs to break.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={  } ]
    S:target_blacklist <
     >

    # Specific blocks that will be griefed by mobs.
    # You may specify metadata (0-15) with a space after the id, followed by the metadata. For example, "cake" will cause mobs to target all cakes, while "cake 0" will cause mobs to only target cakes that have not been partially eaten.
    # You may whitelist an entire namespace (mod) by using the namespace followed by a *. For example, "minecraft:*" will whitelist every vanilla block. This does not work if you try to also specify metadata.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={ minecraft:farmland, minecraft:bed, minecraft:crafting_table, minecraft:brewing_stand, minecraft:trapdoor, minecraft:ladder, minecraft:wooden_door, minecraft:birch_door, minecraft:spruce_door, minecraft:jungle_door, minecraft:acacia_door, minecraft:dark_oak_door, minecraft:fence_gate, minecraft:birch_fence_gate, minecraft:spruce_fence_gate, minecraft:jungle_fence_gate, minecraft:acacia_fence_gate, minecraft:dark_oak_fence_gate, minecraft:golden_rail } ]
    S:target_blocks <
        minecraft:farmland
        minecraft:bed
        minecraft:crafting_table
        minecraft:brewing_stand
        minecraft:trapdoor
        minecraft:ladder
        minecraft:wooden_door
        minecraft:birch_door
        minecraft:spruce_door
        minecraft:jungle_door
        minecraft:acacia_door
        minecraft:dark_oak_door
        minecraft:fence_gate
        minecraft:birch_fence_gate
        minecraft:spruce_fence_gate
        minecraft:jungle_fence_gate
        minecraft:acacia_fence_gate
        minecraft:dark_oak_fence_gate
        minecraft:golden_rail
     >

    # Specific lootable blocks that will be griefed by mobs.
    # Unlike the normal "target_blocks", these blocks will not be targeted if they still have a loot table tag (e.g., unopened dungeon chests).
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={ minecraft:chest, minecraft:trapped_chest } ]
    S:target_lootable <
        minecraft:chest
        minecraft:trapped_chest
     >
}


##########################################################################################################
# jockeys
#--------------------------------------------------------------------------------------------------------#
# Options relating to which mobs should act as riders or mounts.
##########################################################################################################

jockeys {
    # List of mobs that can be ridden on by normal-sized riders (not all entities can be controlled by their rider).
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Spider, Slime, Pig, Sheep, Cow, PolarBear } ]
    S:mount_list <
        Spider
        Slime
        Pig
        Sheep
        Cow
        PolarBear
     >

    # List of mobs that can be ridden on by small riders or normal-sized riders that are babies (not all entities can be controlled by their rider).
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Chicken, Rabbit } ]
    S:mount_list_small <
        Chicken
        Rabbit
     >

    # List of mobs that can ride normal-sized mounts and the chance for them to gain the rider AI.
    # Note that the entity must have task-based AI enabled.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Zombie 0.05, Skeleton 0.1, Creeper 0.05, Witch 0.05, PigZombie 0.1 } ]
    S:rider_list <
        Zombie 0.05
        Skeleton 0.1
        Creeper 0.05
        Witch 0.05
        PigZombie 0.1
     >

    # List of mobs that can only ride small mounts or normal-sized mounts that are babies and the chance for them to gain the rider AI.
    # Note that the entity must have task-based AI enabled.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={  } ]
    S:rider_list_small <
     >
}


##########################################################################################################
# reaction_ai
#--------------------------------------------------------------------------------------------------------#
# Options to customize reactive behaviors.
##########################################################################################################

reaction_ai {
    # If true, all mobs will try to avoid TNT and creepers that are about to explode.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:avoid_explosions=true

    # If true, all mobs will call for help from nearby mobs of the same type when struck.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:call_for_help=true

    # Chance for mobs to call for help from a killing blow.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:call_for_help_on_death=0.2

    # The chance any mob will try to sidestep an arrow fired in their direction.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.4 ]
    D:dodge_arrows=0.4
}


##########################################################################################################
# special_ai
#--------------------------------------------------------------------------------------------------------#
# Options to control the types of special AI and their weighted chances of occurring.
##########################################################################################################

special_ai {
    # List of mobs that can gain special AI patterns and their chances to gain those patterns.
    # You can specify multiple chances for each entity - each chance will be rolled and multiple AIs can stack.
    # Note that the entity must have task-based AI enabled.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ Zombie 0.05 0.05, Skeleton 0.2 0.05, PigZombie 0.1 0.05 0.02 } ]
    S:_mob_list <
        Zombie 0.05 0.05
        Skeleton 0.2 0.05
        PigZombie 0.1 0.05 0.02
     >
    I:ai_barrage=1
    I:ai_charge=1
    I:ai_jump=1
    I:ai_leap=1
    I:ai_shaman=1
    I:ai_spawner=1
    I:ai_sprint=1
    I:ai_thief=1
    I:ai_throw=1
    I:ai_throw_player=1
}


##########################################################################################################
# villages
#--------------------------------------------------------------------------------------------------------#
# Options to control village aggression and reputation.
##########################################################################################################

villages {
    # Chance for you to be marked as an aggressor (to be attacked) when you break a block in a village that is not on the "block_blacklist" if your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:block_aggression_chance=0.1

    # The "block_aggression_chance" only triggers if your reputation in the village is less than or equal to this limit (the same limit is also used for special blocks).
    #    >> Integer:[ Range={ -30, 10 }, Default=-5 ]
    I:block_aggression_limit=-5

    # Specific blocks that will NOT aggro villagers when broken.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={ minecraft:stone, minecraft:dirt, minecraft:sand, minecraft:mycelium, minecraft:leaves, minecraft:leaves2, minecraft:snow_layer, minecraft:ice, minecraft:wooden_door, minecraft:birch_door, minecraft:spruce_door, minecraft:jungle_door, minecraft:acacia_door, minecraft:dark_oak_door, minecraft:fence_gate, minecraft:birch_fence_gate, minecraft:spruce_fence_gate, minecraft:jungle_fence_gate, minecraft:acacia_fence_gate, minecraft:dark_oak_fence_gate, minecraft:wheat, minecraft:potatoes, minecraft:carrots, minecraft:nether_wart, minecraft:pumpkin_stem, minecraft:melon_stem, minecraft:pumpkin, minecraft:melon_block, minecraft:reeds, minecraft:cocoa, minecraft:cactus, minecraft:chorus_plant, minecraft:chorus_flower, minecraft:tallgrass, minecraft:brown_mushroom, minecraft:red_mushroom, minecraft:yellow_flower, minecraft:double_plant, minecraft:deadbush } ]
    S:block_blacklist <
        minecraft:stone
        minecraft:dirt
        minecraft:sand
        minecraft:mycelium
        minecraft:leaves
        minecraft:leaves2
        minecraft:snow_layer
        minecraft:ice
        minecraft:wooden_door
        minecraft:birch_door
        minecraft:spruce_door
        minecraft:jungle_door
        minecraft:acacia_door
        minecraft:dark_oak_door
        minecraft:fence_gate
        minecraft:birch_fence_gate
        minecraft:spruce_fence_gate
        minecraft:jungle_fence_gate
        minecraft:acacia_fence_gate
        minecraft:dark_oak_fence_gate
        minecraft:wheat
        minecraft:potatoes
        minecraft:carrots
        minecraft:nether_wart
        minecraft:pumpkin_stem
        minecraft:melon_stem
        minecraft:pumpkin
        minecraft:melon_block
        minecraft:reeds
        minecraft:cocoa
        minecraft:cactus
        minecraft:chorus_plant
        minecraft:chorus_flower
        minecraft:tallgrass
        minecraft:brown_mushroom
        minecraft:red_mushroom
        minecraft:yellow_flower
        minecraft:double_plant
        minecraft:deadbush
     >

    # Chance for you to lose 1 reputation when you break a block in a village that is not on the "block_blacklist" if your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:block_rep_loss_chance=0.1

    # The "block_rep_loss_chance" only triggers if your reputation in the village is equal to or less than this limit.
    #    >> Integer:[ Range={ -30, 10 }, Default=8 ]
    I:block_rep_loss_limit=8

    # Chance for you to be marked as an aggressor (to be attacked) when you break a block in a village that is on the "block_special_list" if your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:block_special_aggression_chance=1.0

    # Specific blocks that use separate chances for aggression and rep loss from other blocks.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={ minecraft:emerald_block } ]
    S:block_special_list <
        minecraft:emerald_block
     >

    # Chance for you to lose 1 reputation when you break a block in a village that is on the "block_special_list".
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:block_special_rep_loss_chance=1.0

    # Specific blocks that WILL aggro villagers when broken. If any blocks are specified here, they will then be the only blocks that aggro villagers (i.e., trigger rep loss and aggression).
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id meta, mod_id:* }, Default={  } ]
    S:block_whitelist <
     >

    # Chance for you to earn 1 reputation for each monster killed near a village. The only reasonable way to restore rep from below -14 with "villagers_defend" enabled.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:help_rep_chance=0.2

    # If true, all players known to a village will gain 1 rep when a new house is added to a village and lose 1 rep when a house is lost. Highly recommended to keep "refresh_houses" enabled when this is.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:house_rep=true

    # If true, houses will stay a part of a village permanently once added (until their doors are destroyed or all villagers in the village are killed), instead of being constantly added/removed as villagers move around.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:refresh_houses=true

    # If true, villagers will defend their village by attacking its aggressors and players with bad reputation (<= -15), just like iron golems do.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:villagers_defend=true
}


